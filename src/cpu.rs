pub struct Cpu {
	mem: [u8; 4096],
	sprites: [[u8;5];16],
}

impl Cpu {
	pub fn new() -> Self {
		Cpu {
			
			mem: [0; 4096],
		
			sprites : 		[
						//0
						[0xF0,0x90,0x90,0x90,0xF0],
						//1
						[0x20,0x60,0x20,0x20,0x70],
						//2
						[0xF0,0x10,0xF0,0x80,0xF0],
						//3
						[0xF0,0x10,0xF0,0x10,0xF0],
						//4
						[0x90,0x90,0xF0,0x10,0x10],
						//5
						[0xF0,0x80,0xF0,0x10,0xF0],
						//6
						[0xF0,0x80,0xF0,0x90,0xF0],
						//7
						[0xF0,0x10,0x20,0x40,0x40],
						//8
						[0xF0,0x90,0xF0,0x90,0xF0],
						//9
						[0xF0,0x90,0xF0,0x10,0xF0],
						//A
						[0xF0,0x90,0xF0,0x90,0x90],
						//B
						[0xE0,0x90,0xE0,0x90,0xE0],
						//C
						[0xF0,0x80,0x80,0x80,0xF0],
						//D
						[0xE0,0x90,0x90,0x90,0xE0],
						//E
						[0xF0,0x80,0xF0,0x80,0xF0],
						//F
						[0xF0,0x80,0xF0,0x80,0x80]]





		}
	
	}


	//load our game in 0x200 offset of memeory and sprites in 0x1ff

	pub fn load_ROM(&mut self, data: &Vec<u8>) {
		
		let offset= 0x200;
		for i in 0..data.len(){

			self.write_byte((offset+1), data[i]);


		}
		let mut x =0 ;
		for sprite in self.sprites.iter(){
			for ch in sprite{

				self.mem[x] = *ch ;

				x += 1;
			}
		}

	
	}

	pub fn write_byte(&mut self, addr: u16, value: u8) {

		self.mem[addr as usize] = value ;
	}

	pub fn read_byte(&mut self, addr: u16)->u8{

		self.mem[addr as usize]

	}
}
